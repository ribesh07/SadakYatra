import React, { CSSProperties } from 'react';

type ToastType = 'default' | 'success' | 'error' | 'loading';
type ToasterPosition = 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';
type ToastState = 'enter' | 'idle' | 'leave';
type ToastOptions = Partial<Pick<IToast, 'style' | 'className'>>;
type ToasterOptions = ToastOptions & {
    [key in ToastType]?: ToastOptions;
};
interface ToasterProps {
    position?: ToasterPosition;
    options?: ToasterOptions;
    duration?: number;
    theme?: 'light' | 'dark';
}
interface IToast {
    id: number;
    state: ToastState;
    type: ToastType;
    zIndex: number;
    title?: string;
    theme?: 'light' | 'dark';
    style?: CSSProperties;
    className?: string;
}

/**
 * Toaster component for displaying toast notifications.
 * @param {object} ToasterProps - Props for configuring the toaster.
 * @returns {JSX.Element} - A component for displaying toast notifications.
 */
declare const Toaster: ({ position, duration, theme, options }: ToasterProps) => React.JSX.Element;

declare const toast: ((message: string) => void) & {
    success: (message: string) => void;
    error: (message: string) => void;
    promise: <T>(promiseFn: () => Promise<T>, options: {
        loading: string;
        success: string;
        error: string;
    }) => Promise<T>;
};

export { Toaster, toast };
